version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hecs-postgres
    environment:
      POSTGRES_DB: hecs
      POSTGRES_USER: hecs
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-hecs_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./control-plane/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hecs"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hecs-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hecs-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-hecs_redis}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hecs-network

  # MQTT Broker (Mosquitto)
  mqtt:
    image: eclipse-mosquitto:2
    container_name: hecs-mqtt
    ports:
      - "1883:1883"
      - "9001:9001"
    volumes:
      - ./deployment/mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf
      - mqtt_data:/mosquitto/data
      - mqtt_logs:/mosquitto/log
    networks:
      - hecs-network

  # FastAPI Backend
  backend:
    build:
      context: ./control-plane/api
      dockerfile: ../../deployment/docker/Dockerfile.backend
    container_name: hecs-backend
    environment:
      - DATABASE_URL=postgresql://hecs:${POSTGRES_PASSWORD:-hecs_password}@postgres:5432/hecs
      - REDIS_URL=redis://:${REDIS_PASSWORD:-hecs_redis}@redis:6379/0
      - MQTT_BROKER=mqtt://mqtt:1883
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - ENVIRONMENT=development
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./control-plane/api:/app
      - backend_logs:/app/logs
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - hecs-network

  # React Frontend
  frontend:
    build:
      context: ./control-plane/ui
      dockerfile: ../../deployment/docker/Dockerfile.frontend
    container_name: hecs-frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000
    ports:
      - "3000:3000"
    volumes:
      - ./control-plane/ui:/app
      - /app/node_modules
    command: npm start
    depends_on:
      - backend
    networks:
      - hecs-network

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: hecs-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - hecs-network

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: hecs-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-clock-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - hecs-network

  # Loki Log Aggregation
  loki:
    image: grafana/loki:latest
    container_name: hecs-loki
    ports:
      - "3100:3100"
    volumes:
      - ./deployment/monitoring/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - hecs-network

  # Promtail Log Shipper
  promtail:
    image: grafana/promtail:latest
    container_name: hecs-promtail
    volumes:
      - ./deployment/monitoring/promtail-config.yml:/etc/promtail/config.yml
      - /var/log:/var/log
      - backend_logs:/var/log/backend
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - hecs-network

volumes:
  postgres_data:
  redis_data:
  mqtt_data:
  mqtt_logs:
  backend_logs:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  hecs-network:
    driver: bridge
